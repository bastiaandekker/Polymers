function [blockSize, beads, r2] = analyzeRosenbluthFile( fileName, numDataBlocks)
% Loads the data from a file ggenerated by rosenbluth.f90. Analyzes it
% content and return the physical quantity stored in the file by making use
% of datablocking.


%% Load data
data=importdata(fileName); 

%% Initialize arrays depending on datasize
dataRowsPerBead=2; % Each row contains all the data for 1 property (eg end tot end), for 1 number of beads
maxNumBeads=int64(max(data(:,1)));  % Number of beads in first column
beads = 3:maxNumBeads;

r2 = zeros(maxNumBeads,numDataBlocks);
blockSize = zeros(maxNumBeads,1);
numPolymers = zeros(maxNumBeads,1);

weights = zeros(size(data,2),1);
R2End2Ends = zeros(size(data,2),1);


%% Loop through data (blocks) and fill arrays

for iBead=3:maxNumBeads
    iData = iBead-2; % Polymers with 1 and 2 beads are not saved
    iDataRowStart = 1+(iData-1)*dataRowsPerBead;
    iDataRows = iDataRowStart:iDataRowStart+dataRowsPerBead-1;
    numPolymers(iBead) = int64(data(iDataRows(1),2)); % Number of config in second column   
    % Weights are on the first row, R2End2end on second row
    weights(1:numPolymers(iBead)) = data(iDataRows(1), 3:numPolymers(iBead)+2);
    R2End2Ends(1:numPolymers(iBead)) = data(iDataRows(2), 3:numPolymers(iBead)+2);
    
    % Loop through all data blocks
    blockSize(iBead) = floor(numPolymers(iBead)/numDataBlocks);
    for (iBlock = 1:numDataBlocks)
        blockIndices = (iBlock-1)*blockSize(iBead)+1:iBlock*blockSize(iBead);
        sumWeights = sum(weights(blockIndices));
        r2(iBead, iBlock) = sum(R2End2Ends(blockIndices).*weights(blockIndices))/sumWeights;
    end       
end
end

